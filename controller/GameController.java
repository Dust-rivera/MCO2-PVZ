package controller;

/**
 * Controller class that manages the interaction between the model and view
 * @author Deveza, Jerry King 
 * @author Rivera, Dustine Gian
 * @version 2.0
 */
import model.*;
import view.*;


public class GameController implements GameViewListener {
    // The game board model
    private final Board board;
    // The GUI view
    private final GameView view;
    // The player/user
    private final User player;
    // Currently selected plant type ("Sunflower", "Peashooter", etc.)
    private String selectedPlant = "";

    /**
     * Initializes the controller, model, and view. Sets up the game.
     */
    public GameController() {
        this.player = new User(); // Create a new player
        this.board = new Board(player, 5, 9); // 5x9 board
        this.view = new GameView(5, 9, this); // 5x9 grid in the view, register controller as listener
        updateSunDisplay(); // Show initial sun count
    }

    /**
     * Handles tile clicks from the view. Places plants if possible.
     * @param row Row index of clicked tile
     * @param col Column index of clicked tile
     */
    @Override
    public void onTileClicked(int row, int col) {
        // Handle Sunflower placement
        if (selectedPlant.equals("Sunflower")) {
            // Check if player has enough sun and tile is empty
            if (player.getSunCount() >= 50 && !board.getTile(row, col).isPlantOccupied()) {
                board.placePlant(row, col, new Sunflower(row, col)); // Place Sunflower
                view.updateTile(row, col, "S"); // Update view
                updateSunDisplay(); // Deduct sun and update display
                view.setMessage("Sunflower Planted at (" + (row + 1) + ", " + (col + 1) + ")");
            } else {
                view.setMessage("Can't place Sunflower here or not enough sun.");
            }
        // Handle Peashooter placement
        } else if (selectedPlant.equals("Peashooter")) {
            if (player.getSunCount() >= 100 && !board.getTile(row, col).isPlantOccupied()) {
                board.placePlant(row, col, new Peashooter(row, col));
                view.updateTile(row, col, "P");
                updateSunDisplay();
                view.setMessage("Peashooter Planted at (" + (row + 1) + ", " + (col + 1) + ")");
            } else {
                view.setMessage("Can't place Peashooter here or not enough sun.");
            }
        // Handle CherryBomb placement (logic commented out)
        } else if (selectedPlant.equals("CherryBomb")) {
            if (player.getSunCount() >= 150 && !board.getTile(row, col).isPlantOccupied()) {
                // CherryBomb logic would go here (currently commented out)
                player.buyPlant(150); // Deduct sun for CherryBomb
                updateSunDisplay();
                view.setMessage("CherryBomb exploded at (" + (row + 1) + ", " + (col + 1) + ")");
            } else {
                view.setMessage("Can't place CherryBomb or not enough sun.");
            }
        }
        // Reset selected plant after placement attempt
        selectedPlant = "";
    }

    /**
     * Handles plant selection from the view (e.g., Sunflower, Peashooter, or sun generation).
     * @param plantType The type of plant selected
     */
    @Override
    public void onPlantSelected(String plantType) {
        // Special signal to generate sun (should not be called from view anymore)
        if (plantType.equals("_generateSun")) {
            // No-op: sun is now generated by Board every 24 seconds
        } else {
            this.selectedPlant = plantType; // Store selected plant for placement
        }
        view.setUnclaimedSun(board.getSunCount()); // Update unclaimed sun display
    }

    /**
     * Handles the start of the game and each game tick (timer event).
     * Updates board, collects sun, updates view, and checks for game end.
     */
    @Override
    public void onStartGame() {
        board.update(); // Advance game state (move zombies, plants act, etc.)
        // Remove auto-collect: player.collectSun(board.getSunCount(), board);
        String msg = board.getMessage();
        if (msg != null && (msg.contains("damaged") || msg.contains("dead"))) {
            view.setMessage(msg);
            view.clearMessageAfterDelay(1000); // Clear after 1 second
        }
        updateSunDisplay(); // Update sun count
        view.setUnclaimedSun(board.getSunCount()); // Update unclaimed sun display
        updateZombies(); // Update zombie positions in view
        updatePlants(); // Update plant positions in view
        // Game end logic
        if (!board.getRunning()) {
            view.setMessage("GAME OVER! Zombies reached your house.");
            view.stopAllTimers();
        } else if (view.getTimeLeft() <= 0) {
            view.setMessage("GAME WON!!!!!");
            view.stopAllTimers();
        }
    }

    /**
     * Handles the claim sun button click.
     */
    @Override
    public void onClaimSun() {
        int unclaimed = board.getSunCount();
        if (unclaimed > 0) {
            player.collectSun(unclaimed, board);
            updateSunDisplay();
            view.setUnclaimedSun(board.getSunCount());
            view.setMessage("Claimed " + (unclaimed * 25) + " sun!");
        } else {
            view.setMessage("No sun to claim!");
        }
    }

    /**
     * Updates the sun count display in the view.
     */
    private void updateSunDisplay() {
        view.setSun(player.getSunCount());
    }

    /**
     * Updates the zombie markers on the board in the view.
     * Shows number of zombies per tile.
     */
    private void updateZombies() {
        view.clearZombies(); // Remove all zombie markers
        for (int r = 0; r < board.getRows(); r++) {
            for (int c = 0; c < board.getCol(); c++) {
                Tile tile = board.getTile(r, c);
                int zombieCount = tile.getZombies().size();
                if (zombieCount > 0) {
                    view.updateTile(r, c, "Z" + zombieCount); // Show zombie count
                }
            }
        }
    }

    /**
     * Updates the plant markers on the board in the view.
     * Shows S for Sunflower, P for Peashooter.
     */
    private void updatePlants() {
        for (int r = 0; r < board.getRows(); r++) {
            for (int c = 0; c < board.getCol(); c++) {
                Plant plant = board.getTile(r, c).getPlant();
                String currentText = view.getTileText(r, c);
                // Remove any S or P, but keep Z# if present
                String textWithoutPlant = currentText.replaceAll("[SP]", "").trim();
                if (plant == null || plant.isDead()) {
                    view.updateTile(r, c, textWithoutPlant); // Only remove plant marker, keep zombies
                } else if (plant instanceof Sunflower) {
                    view.updateTile(r, c, ("S" + textWithoutPlant).trim());
                } else if (plant instanceof Peashooter) {
                    view.updateTile(r, c, ("P" + textWithoutPlant).trim());
                }
            }
        }
    }
}
